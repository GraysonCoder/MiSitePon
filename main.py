# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π Telegram-–±–æ—Ç: –∫–Ω–æ–ø–∫–∞ "üõí –ö—É–ø–∏—Ç—å", –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–∏—Ç–æ–≤
# –í—Å–µ —á–∏—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –æ–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞

import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup,
    FSInputFile
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime

BOT_TOKEN = "8189908186:AAF_nXDaGpU3dCmlNTVdAZtUIsP6V8AdxQY"
ADMIN_ID = 7019630461

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# FSM –¥–ª—è —Å–∫—Ä–∏–Ω–∞ –æ–ø–ª–∞—Ç—ã
class Purchase(StatesGroup):
    waiting_for_screenshot = State()

# –°–ø–∏—Å–æ–∫ —á–∏—Ç–æ–≤: (–Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, filename.zip)
CHEATS = {
    "cheat1": ("StandShaer old cheat", "–°—Ç–∞—Ä—ã–π —á–∏—Ç –¥–ª—è StandShaer. –†–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.", "cheat1.zip"),
    "cheat2": ("StandShaer New cheat", "–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —á–∏—Ç–∞ StandShaer.", "cheat2.zip"),
    "cheat3": ("Stand52 V1 cheat mobile", "Stand52 V1 –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.", "cheat3.zip"),
    "cheat4": ("Stand52 V2 cheat mobile", "–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è Stand52 V2 –¥–ª—è Android.", "cheat4.zip"),
    "cheat5": ("Stand52 V1 cheat Pc", "Stand52 –≤–µ—Ä—Å–∏—è 1 –¥–ª—è –ü–ö.", "cheat5.zip"),
    "cheat6": ("Stand52 V2 cheat Pc", "Stand52 –≤–µ—Ä—Å–∏—è 2 –¥–ª—è –ü–ö.", "cheat6.zip"),
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–æ–π –õ–°", url="@sn0wbypass")],
        [InlineKeyboardButton(text="–ö–∞–Ω–∞–ª", url="https://t.me/+mDO77mr4jxxhZjdi")],
        [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data="buy_menu")],
        [InlineKeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á–∏—Ç", callback_data="suggest")]
    ])

# –ú–µ–Ω—é —á–∏—Ç–æ–≤
def cheats_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        *[
            [InlineKeyboardButton(text=f"üìÑ {title}", callback_data=f"cheat_{key}")]
            for key, (title, _, _) in CHEATS.items()
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

# –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
def free_download_keyboard(cheat_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data=f"free_{cheat_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_menu")]
    ])

@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu())

@dp.callback_query(F.data == "back")
async def go_back(callback: CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

@dp.callback_query(F.data == "buy_menu")
async def buy_menu(callback: CallbackQuery):
    text = (
        "üõí <b>–ú–∞–≥–∞–∑–∏–Ω</b>\n\n"
        "üí¨ <i>–û–ø–ª–∞—Ç–∞ —á–∏—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.</i>\n"
        "<b>–í—Å–µ —á–∏—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ.</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —á–∏—Ç:"
    )
    await callback.message.edit_text(text, reply_markup=cheats_keyboard())

@dp.callback_query(F.data.startswith("cheat_"))
async def show_cheat(callback: CallbackQuery):
    cheat_id = callback.data.split("_")[1]
    title, desc, _ = CHEATS[cheat_id]
    await callback.message.edit_text(
        f"<b>{title}</b>\n\n{desc}",
        reply_markup=free_download_keyboard(cheat_id)
    )

@dp.callback_query(F.data.startswith("free_"))
async def send_free_file(callback: CallbackQuery):
    cheat_id = callback.data.split("_")[1]
    title, _, filename = CHEATS[cheat_id]
    try:
        file = FSInputFile(path=f"files/{filename}")
        await bot.send_document(callback.from_user.id, file, caption=f"<b>{title}</b>\n‚¨áÔ∏è –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ!")
        await callback.answer("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ", show_alert=True)
    except Exception:
        await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå", show_alert=True)

@dp.callback_query(F.data == "suggest")
async def suggest_handler(callback: CallbackQuery):
    await bot.send_message(callback.from_user.id,
                           "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ —á–∏—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å. –Ø –ø–µ—Ä–µ–¥–∞–º –∞–¥–º–∏–Ω–∞–º.")
    await callback.answer()

@dp.message(F.text & ~F.via_bot)
async def catch_suggestions(message: Message):
    if message.chat.type == "private":
        await bot.send_message(
            ADMIN_ID,
            f"üì¨ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —á–∏—Ç–∞</b> –æ—Ç @{message.from_user.username or message.from_user.id}:\n\n{message.text}"
        )
        await message.reply("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

